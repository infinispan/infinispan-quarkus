
#
# The name of the application.
# If not set, defaults to the name of the project (except for tests where it is not set at all).
#
#quarkus.application.name=

#
# The version of the application.
# If not set, defaults to the version of the project (except for tests where it is not set at all).
#
#quarkus.application.version=

#
# If set to true '@Inject' is automatically added to all non-static fields that are annotated with
# one of the annotations defined by {@link AutoInjectAnnotationBuildItem}.
#
#quarkus.arc.auto-inject-fields=true

#
# The default naming strategy for {@link ConfigProperties.NamingStrategy}. The allowed values are determined
# by that enum
#
#quarkus.arc.config-properties-default-naming-strategy=kebab-case

#
# If set to true, Arc will transform the bytecode of beans containing methods that need to be proxyable
# but have been declared as final. The transformation is simply a matter of removing final.
# This ensures that a proxy can be created properly.
# If the value is set to false, then an exception is thrown at build time indicating
# that a proxy could not be created because a method was final.
#
#quarkus.arc.remove-final-for-proxyable-methods=true

#
# 
#  - If set to `all` (or `true`) the container will attempt to remove all unused beans.
#  - If set to none (or `false`) no beans will ever be removed even if they are unused (according to the criteria set out
# below)
#  - If set to `fwk`, then all unused beans will be removed, except the unused beans whose classes are declared in the
# application code
# 
# <br>
#
# An unused bean:
# 
#  - is not a built-in bean or interceptor,
#  - is not eligible for injection to any injection point,
#  - is not excluded by any extension,
#  - does not have a name,
#  - does not declare an observer,
#  - does not declare any producer which is eligible for injection to any injection point,
#  - is not directly eligible for injection into any {@link javax.enterprise.inject.Instance} injection point
# 
# </p>
#
# @see UnremovableBeanBuildItem
#
#quarkus.arc.remove-unused-beans=all

#
# Whether or not the banner will be displayed
#
quarkus.banner.enabled=false

#
# The path of the banner (path relative to root of classpath)
# which could be provided by user
#
#quarkus.banner.path=default_banner.txt

#
# If set to a directory, all generated classes will be written into that directory
#
#quarkus.debug.generated-classes-dir=

#
# If set to true, writes a list of all reflective classes to META-INF
#
#quarkus.debug.reflection=false

#
# Default locale that can be consumed by the extensions.
#
# The locales must be specified in the IETF BCP 47 format e.g. en-US or fr-FR.
#
# For instance, the Hibernate Validator extension makes use of it.
#
#quarkus.default-locale=${user.language:en}-${user.country:}

#
# The maven artifactId of the artifact to index
#
#quarkus.index-dependency.*.artifact-id=

#
# The maven classifier of the artifact to index
#
#quarkus.index-dependency.*.classifier=

#
# The maven groupId of the artifact to index
#
#quarkus.index-dependency.*.group-id=

#
# The configured Infinispan embedded xml file which is used by the managed EmbeddedCacheManager and its Caches
#
#quarkus.infinispan-embedded.xml-config=

#
# Sets the port to bind the single port on
#
#quarkus.infinispan-server.bind-port=11222

#
# The name of the configuration file. May be an absolute file name or relative to the server configuration directory
#
#quarkus.infinispan-server.config-file=infinispan.xml

#
# The path of the server configuration directory, relative to the server root directory
#
#quarkus.infinispan-server.config-path=conf

#
# The data path of the server, where things such as persisted data is stored
#
#quarkus.infinispan-server.data-path=data

#
# The root directory of the server, where other things are based
#
#quarkus.infinispan-server.server-path=server

#
# @deprecated JNI is always enabled starting from GraalVM 19.3.1.
#
#quarkus.jni.enable=true

#
# Paths of library to load.
#
#quarkus.jni.library-paths=

#
# Password used to use to connect to the remote dev-mode application
#
#quarkus.live-reload.password=

#
# URL used to use to connect to the remote dev-mode application
#
#quarkus.live-reload.url=

#
# The set of supported locales that can be consumed by the extensions.
#
# The locales must be specified in the IETF BCP 47 format e.g. en-US or fr-FR.
#
# For instance, the Hibernate Validator extension makes use of it.
#
#quarkus.locales=${user.language:en}-${user.country:}

#
# The names of the handlers to link to this category.
#
#quarkus.log.category.*.handlers=

#
# The log level level for this category
#
#quarkus.log.category.*.level=inherit

#
# Specify whether or not this logger should send its output to its parent Logger
#
#quarkus.log.category.*.use-parent-handlers=true

#
# Indicates whether to log asynchronously
#
#quarkus.log.console.async=false

#
# Determine whether to block the publisher (rather than drop the message) when the queue is full
#
#quarkus.log.console.async.overflow=block

#
# The queue length to use before flushing writing
#
#quarkus.log.console.async.queue-length=512

#
# If the console logging should be in color. If undefined quarkus takes
# best guess based on operating system and environment.
# Note that this value will be ignored if an extension is present that takes
# control of console formatting (e.g. an XML or JSON-format extension).
#
#quarkus.log.console.color=

#
# Specify how much the colors should be darkened.
# Note that this value will be ignored if an extension is present that takes
# control of console formatting (e.g. an XML or JSON-format extension).
#
#quarkus.log.console.darken=0

#
# If console logging should be enabled
#
#quarkus.log.console.enable=true

#
# The log format. Note that this value will be ignored if an extension is present that takes
# control of console formatting (e.g. an XML or JSON-format extension).
#
#quarkus.log.console.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%c{3.}] (%t) %s%e%n

#
# The console log level.
#
#quarkus.log.console.level=ALL

#
# Indicates whether to log asynchronously
#
#quarkus.log.file.async=false

#
# Determine whether to block the publisher (rather than drop the message) when the queue is full
#
#quarkus.log.file.async.overflow=block

#
# The queue length to use before flushing writing
#
#quarkus.log.file.async.queue-length=512

#
# If file logging should be enabled
#
#quarkus.log.file.enable=false

#
# The log format
#
#quarkus.log.file.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %h %N[%i] %-5p [%c{3.}] (%t) %s%e%n

#
# The level of logs to be written into the file.
#
#quarkus.log.file.level=ALL

#
# The name of the file in which logs will be written.
#
#quarkus.log.file.path=quarkus.log

#
# File handler rotation file suffix.
#
# Example fileSuffix: .yyyy-MM-dd
#
#quarkus.log.file.rotation.file-suffix=

#
# The maximum number of backups to keep.
#
#quarkus.log.file.rotation.max-backup-index=1

#
# The maximum file size of the log file after which a rotation is executed.
#
#quarkus.log.file.rotation.max-file-size=

#
# Indicates whether to rotate log files on server initialization.
#
#quarkus.log.file.rotation.rotate-on-boot=true

#
# The message starts to match
#
#quarkus.log.filter.*.if-starts-with=inherit

#
# Indicates whether to log asynchronously
#
#quarkus.log.handler.console.*.async=false

#
# Determine whether to block the publisher (rather than drop the message) when the queue is full
#
#quarkus.log.handler.console.*.async.overflow=block

#
# The queue length to use before flushing writing
#
#quarkus.log.handler.console.*.async.queue-length=512

#
# If the console logging should be in color. If undefined quarkus takes
# best guess based on operating system and environment.
# Note that this value will be ignored if an extension is present that takes
# control of console formatting (e.g. an XML or JSON-format extension).
#
#quarkus.log.handler.console.*.color=

#
# Specify how much the colors should be darkened.
# Note that this value will be ignored if an extension is present that takes
# control of console formatting (e.g. an XML or JSON-format extension).
#
#quarkus.log.handler.console.*.darken=0

#
# If console logging should be enabled
#
#quarkus.log.handler.console.*.enable=true

#
# The log format. Note that this value will be ignored if an extension is present that takes
# control of console formatting (e.g. an XML or JSON-format extension).
#
#quarkus.log.handler.console.*.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%c{3.}] (%t) %s%e%n

#
# The console log level.
#
#quarkus.log.handler.console.*.level=ALL

#
# Indicates whether to log asynchronously
#
#quarkus.log.handler.file.*.async=false

#
# Determine whether to block the publisher (rather than drop the message) when the queue is full
#
#quarkus.log.handler.file.*.async.overflow=block

#
# The queue length to use before flushing writing
#
#quarkus.log.handler.file.*.async.queue-length=512

#
# If file logging should be enabled
#
#quarkus.log.handler.file.*.enable=false

#
# The log format
#
#quarkus.log.handler.file.*.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %h %N[%i] %-5p [%c{3.}] (%t) %s%e%n

#
# The level of logs to be written into the file.
#
#quarkus.log.handler.file.*.level=ALL

#
# The name of the file in which logs will be written.
#
#quarkus.log.handler.file.*.path=quarkus.log

#
# File handler rotation file suffix.
#
# Example fileSuffix: .yyyy-MM-dd
#
#quarkus.log.handler.file.*.rotation.file-suffix=

#
# The maximum number of backups to keep.
#
#quarkus.log.handler.file.*.rotation.max-backup-index=1

#
# The maximum file size of the log file after which a rotation is executed.
#
#quarkus.log.handler.file.*.rotation.max-file-size=

#
# Indicates whether to rotate log files on server initialization.
#
#quarkus.log.handler.file.*.rotation.rotate-on-boot=true

#
# The app name used when formatting the message in RFC5424 format
#
#quarkus.log.handler.syslog.*.app-name=

#
# Indicates whether to log asynchronously
#
#quarkus.log.handler.syslog.*.async=false

#
# Determine whether to block the publisher (rather than drop the message) when the queue is full
#
#quarkus.log.handler.syslog.*.async.overflow=block

#
# The queue length to use before flushing writing
#
#quarkus.log.handler.syslog.*.async.queue-length=512

#
# Enables or disables blocking when attempting to reconnect a
# {@link org.jboss.logmanager.handlers.SyslogHandler.Protocol#TCP
# TCP} or {@link org.jboss.logmanager.handlers.SyslogHandler.Protocol#SSL_TCP SSL TCP} protocol
#
#quarkus.log.handler.syslog.*.block-on-reconnect=false

#
# If syslog logging should be enabled
#
#quarkus.log.handler.syslog.*.enable=false

#
# The IP address and port of the syslog server
#
#quarkus.log.handler.syslog.*.endpoint=localhost:514

#
# Sets the facility used when calculating the priority of the message as defined by RFC-5424 and RFC-3164
#
#quarkus.log.handler.syslog.*.facility=user-level

#
# The log message format
#
#quarkus.log.handler.syslog.*.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%c{3.}] (%t) %s%e%n

#
# The name of the host the messages are being sent from
#
#quarkus.log.handler.syslog.*.hostname=

#
# The log level specifying, which message levels will be logged by syslog logger
#
#quarkus.log.handler.syslog.*.level=ALL

#
# Sets the protocol used to connect to the syslog server
#
#quarkus.log.handler.syslog.*.protocol=tcp

#
# Set the {@link SyslogType syslog type} this handler should use to format the message sent
#
#quarkus.log.handler.syslog.*.syslog-type=rfc5424

#
# Set to 'true' if the message should be truncated
#
#quarkus.log.handler.syslog.*.truncate=true

#
# Set to 'true' if the message being sent should be prefixed with the size of the message
#
#quarkus.log.handler.syslog.*.use-counting-framing=false

#
# The log level of the root category, which is used as the default log level for all categories.
#
#quarkus.log.level=INFO

#
# The default minimum log level
#
#quarkus.log.min-level=INFO

#
# The app name used when formatting the message in RFC5424 format
#
#quarkus.log.syslog.app-name=

#
# Indicates whether to log asynchronously
#
#quarkus.log.syslog.async=false

#
# Determine whether to block the publisher (rather than drop the message) when the queue is full
#
#quarkus.log.syslog.async.overflow=block

#
# The queue length to use before flushing writing
#
#quarkus.log.syslog.async.queue-length=512

#
# Enables or disables blocking when attempting to reconnect a
# {@link org.jboss.logmanager.handlers.SyslogHandler.Protocol#TCP
# TCP} or {@link org.jboss.logmanager.handlers.SyslogHandler.Protocol#SSL_TCP SSL TCP} protocol
#
#quarkus.log.syslog.block-on-reconnect=false

#
# If syslog logging should be enabled
#
#quarkus.log.syslog.enable=false

#
# The IP address and port of the syslog server
#
#quarkus.log.syslog.endpoint=localhost:514

#
# Sets the facility used when calculating the priority of the message as defined by RFC-5424 and RFC-3164
#
#quarkus.log.syslog.facility=user-level

#
# The log message format
#
#quarkus.log.syslog.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%c{3.}] (%t) %s%e%n

#
# The name of the host the messages are being sent from
#
#quarkus.log.syslog.hostname=

#
# The log level specifying, which message levels will be logged by syslog logger
#
#quarkus.log.syslog.level=ALL

#
# Sets the protocol used to connect to the syslog server
#
#quarkus.log.syslog.protocol=tcp

#
# Set the {@link SyslogType syslog type} this handler should use to format the message sent
#
#quarkus.log.syslog.syslog-type=rfc5424

#
# Set to 'true' if the message should be truncated
#
#quarkus.log.syslog.truncate=true

#
# Set to 'true' if the message being sent should be prefixed with the size of the message
#
#quarkus.log.syslog.use-counting-framing=false

#
# If all character sets should be added to the native image. This increases image size
#
#quarkus.native.add-all-charsets=false

#
# Additional arguments to pass to the build process
#
#quarkus.native.additional-build-args=

#
# If all META-INF/services entries should be automatically registered
#
#quarkus.native.auto-service-loader-registration=false

#
# The docker image to use to do the image build
#
#quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:19.3.1-java11

#
# If the native image server should be restarted
#
#quarkus.native.cleanup-server=false

#
# If this build should be done using a container runtime. If this is set docker will be used by default,
# unless container-runtime is also set.
#
#quarkus.native.container-build=false

#
# The container runtime (e.g. docker) that is used to do an image based build. If this is set then
# a container build is always done.
#
#quarkus.native.container-runtime=

#
# Options to pass to the container runtime
#
#quarkus.native.container-runtime-options=

#
# If the native image build should wait for a debugger to be attached before running. This is an advanced option
# and is generally only intended for those familiar with GraalVM internals
#
#quarkus.native.debug-build-process=false

#
# If debug symbols should be included
#
#quarkus.native.debug-symbols=false

#
# If the bytecode of all proxies should be dumped for inspection
#
#quarkus.native.dump-proxies=false

#
# If all security services should be added to the native image
#
#quarkus.native.enable-all-security-services=false

#
# If a JVM based 'fallback image' should be created if native image fails. This is not recommended, as this is
# functionally the same as just running the application in a JVM
#
#quarkus.native.enable-fallback-images=false

#
# If the HTTP url handler should be enabled, allowing you to do URL.openConnection() for HTTP URLs
#
#quarkus.native.enable-http-url-handler=true

#
# If the HTTPS url handler should be enabled, allowing you to do URL.openConnection() for HTTPS URLs
#
#quarkus.native.enable-https-url-handler=false

#
# If isolates should be enabled
#
#quarkus.native.enable-isolates=true

#
# @deprecated JNI is always enabled starting from GraalVM 19.3.1.
#
#quarkus.native.enable-jni=true

#
# If the reports on call paths and included packages/classes/methods should be generated
#
#quarkus.native.enable-reports=false

#
# If the native image server should be used. This can speed up compilation but can result in changes not always
# being picked up due to cache invalidation not working 100%
#
#quarkus.native.enable-server=false

#
# If the resulting image should allow VM introspection
#
#quarkus.native.enable-vm-inspection=false

#
# If full stack traces are enabled in the resulting image
#
#quarkus.native.full-stack-traces=true

#
# The location of the Graal distribution
#
#quarkus.native.graalvm-home=${GRAALVM_HOME:}

#
# If all time zones should be added to the native image. This increases image size
#
#quarkus.native.include-all-time-zones=false

#
# The location of the JDK
#
#quarkus.native.java-home=${java.home}

#
# The maximum Java heap to be used during the native image generation
#
#quarkus.native.native-image-xmx=

#
# If the debug port should be published when building with docker and debug-build-process is true
#
#quarkus.native.publish-debug-build-process-port=true

#
# If errors should be reported at runtime. This is a more relaxed setting, however it is not recommended as it means
# your application may fail at runtime if an unsupported feature is used by accident.
#
#quarkus.native.report-errors-at-runtime=false

#
# If exceptions should be reported with a full stack trace
#
#quarkus.native.report-exception-stack-traces=true

#
# The entry point of the application. In most cases this should not be modified.
#
#quarkus.package.main-class=io.quarkus.runner.GeneratedMain

#
# If the Implementation information should be included in the runner jar's MANIFEST.MF.
#
#quarkus.package.manifest.add-implementation-entries=true

#
# The output folder in which to place the output, this is resolved relative to the build
# systems target directory.
#
#quarkus.package.output-directory=

#
# The name of the final artifact
#
#quarkus.package.output-name=

#
# The suffix that is applied to the runner jar and native images
#
#quarkus.package.runner-suffix=-runner

#
# The requested output type.
#
# The default built in types are jar and native
#
#quarkus.package.type=jar

#
# If the java runner should be packed as an uberjar
#
#quarkus.package.uber-jar=false

#
# Files that should not be copied to the output artifact
#
#quarkus.package.user-configured-ignored-entries=

#
# artifactId of the platform to use
#
#quarkus.platform.artifact-id=quarkus-universe-bom

#
# groupId of the platform to use
#
#quarkus.platform.group-id=io.quarkus

#
# version of the platform to use
#
#quarkus.platform.version=999-SNAPSHOT

#
# Profile that will be active when Quarkus launches
#
#quarkus.profile=prod

#
# The timeout to wait for running requests to finish. If this is not set then the application will exit immediately.
#
# Setting this timeout will incur a small performance penalty, as it requires active requests to be tracked.
#
#quarkus.shutdown.timeout=

#
# Enable native SSL support.
#
#quarkus.ssl.native=

#
# The profile to use when testing the native image
#
#quarkus.test.native-image-profile=prod

#
# Duration to wait for the native image to built during testing
#
#quarkus.test.native-image-wait-time=PT5M

#
# The core thread pool size. This number of threads will always be kept alive.
#
#quarkus.thread-pool.core-threads=1

#
# The executor growth resistance.
#
# A resistance factor applied after the core pool is full; values applied here will cause that fraction
# of submissions to create new threads when no idle thread is available. A value of '0.0f' implies that
# threads beyond the core size should be created as aggressively as threads within it; a value of '1.0f'
# implies that threads beyond the core size should never be created.
#
#quarkus.thread-pool.growth-resistance=0

#
# The amount of time a thread will stay alive with no work.
#
#quarkus.thread-pool.keep-alive-time=30

#
# The maximum number of threads. If this is not specified then
# it will be automatically sized to 8 * the number of available processors
#
#quarkus.thread-pool.max-threads=

#
# Prefill core thread pool.
# The core thread pool will be initialised with the core number of threads at startup
#
#quarkus.thread-pool.prefill=true

#
# The queue size. For most applications this should be unbounded
#
#quarkus.thread-pool.queue-size=

#
# The frequency at which the status of the thread pool should be checked during shutdown. Information about
# waiting tasks and threads will be checked and possibly logged at this interval. Setting this key to an empty
# value disables the shutdown check interval.
#
#quarkus.thread-pool.shutdown-check-interval=5

#
# The amount of time to wait for thread pool shutdown before tasks should be interrupted. If this value is
# greater than or equal to the value for 'shutdown-timeout', then tasks will not be interrupted before
# the shutdown timeout occurs.
#
#quarkus.thread-pool.shutdown-interrupt=10

#
# The shutdown timeout. If all pending work has not been completed by this time
# then additional threads will be spawned to attempt to finish any pending tasks, and the shutdown process will
# continue
#
#quarkus.thread-pool.shutdown-timeout=1M
